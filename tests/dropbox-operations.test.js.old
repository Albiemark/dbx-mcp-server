#!/usr/bin/env node
/**
 * Dropbox MCP Server Test Suite
 * 
 * This script tests all the basic operations of the Dropbox MCP server.
 * It performs a series of operations to verify that the server is working correctly.
 * 
 * To run this test:
 * 1. Make sure you have a valid Dropbox access token in the 'token' file
 * 2. Run the test: node tests/dropbox-operations.test.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { spawn } from "child_process";

// Get the directory name of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, "..");

process.on("unhandledRejection", (reason, promise) => {
    console.error("Unhandled Rejection at:", promise, "reason:", reason);
    // Application specific logging, throwing an error, or other logic here
});

process.on("uncaughtException", (err) => {
    console.error("Uncaught Exception:", err);
    // Application specific logging, throwing an error, or other logic here
});

// Configuration
const SERVER_COMMAND = 'node';
const SERVER_ARGS = [path.join(rootDir, 'build', 'index.js')];
const TEST_FOLDER_NAME = 'MCP Test Folder';
const TEST_FILE_NAME = 'test_file.txt';
const TEST_FILE_CONTENT = 'Hello, this is a test file created by the Dropbox MCP test suite.';
const TEST_FILE_COPY_NAME = 'test_file_copy.txt';
const TEST_FILE_RENAMED_NAME = 'renamed_test_file.txt';

// Helper function to encode content to base64
function encodeBase64(text) {
    return Buffer.from(text).toString('base64');
}

// Helper function to decode base64 content
function decodeBase64(base64) {
    return Buffer.from(base64, 'base64').toString('utf-8');
}

// Helper function to read the token file
function readToken() {
    try {
        return fs.readFileSync(path.join(rootDir, 'token'), 'utf-8').trim();
    } catch (error) {
        console.error('Error reading token file:', error);
        process.exit(1);
    }
}

// Helper function to send a request to the MCP server
async function sendMcpRequest(request) {
    return new Promise((resolve, reject) => {
        const serverProcess = spawn(SERVER_COMMAND, SERVER_ARGS, {
            stdio: ['pipe', 'pipe', 'pipe'],
            env: { ...process.env }
        });

        let responseData = '';
        let errorData = '';

        serverProcess.stdout.on('data', (data) => {
            responseData += data.toString();
        });

        serverProcess.stderr.on('data', (data) => {
            errorData += data.toString();
        });

        serverProcess.on('close', (code) => {
            if (code !== 0) {
                console.error(`Server process exited with code ${code}`);
                console.error('Error output:', errorData);
                reject(new Error(`Server process exited with code ${code}`));
                return;
            }

            try {
                const response = JSON.parse(responseData);
                resolve(response);
            } catch (error) {
                console.error('Error parsing response:', error);
                console.error('Response data:', responseData);
                reject(error);
            }
        });

        serverProcess.stdin.write(JSON.stringify(request) + '\n');
        serverProcess.stdin.end();
    });
}

// Helper function to call an MCP tool
async function callMcpTool(toolName, args = {}, retryCount = 0) {
    const request = {
        jsonrpc: '2.0',
        id: Date.now().toString(),
        method: 'tools/call',
        params: {
            name: toolName,
            arguments: args
        }
    };

    try {
        const response = await sendMcpRequest(request);
        if (response.error) {
            throw new Error(`MCP error: ${JSON.stringify(response.error)}`);
        }

        // Extract the actual content from the MCP response
        if (response.result && response.result.content && response.result.content.length > 0) {
            const content = response.result.content[0];
            if (content.type === 'text') {
                const text = content.text;

                // Check for authentication errors
                if (text.includes("Authentication required") && toolName !== 'update_access_token' && retryCount < 1) {
                    console.log('Authentication error detected, updating token and retrying...');
                    const token = readToken();
                    await callMcpTool('update_access_token', { token });
                    return callMcpTool(toolName, args, retryCount + 1);
                }

                try {
                    // Try to parse the text as JSON
                    return JSON.parse(text);
                } catch (e) {
                    // If it's not JSON, return the text directly
                    return text;
                }
            }
        }

        return response.result;
    } catch (error) {
        console.error(`Error calling MCP tool ${toolName}:`, error);
        throw error;
    }
}

// Main test function
async function runTests() {
    console.log('Starting Dropbox MCP Server Tests...');
    console.log('-----------------------------------');

    // Track test results
    const results = {
        total: 15, // Total number of steps
        passed: 0,
        failed: 0,
        steps: {}
    };

    function recordStepResult(step, success, error = null) {
        results.steps[step] = {
            success,
            error: error ? error.message : null
        };
        if (success) {
            results.passed++;
        } else {
            results.failed++;
        }
    }

    try {
        // Step 1: Update access token
        const token = readToken();
        console.log('1. Updating access token...');
        try {
            await callMcpTool('update_access_token', { token });
            console.log('✅ Access token updated successfully');
            recordStepResult('Update Access Token', true);
        } catch (error) {
            console.error('❌ Failed to update access token:', error);
            recordStepResult('Update Access Token', false, error);
            throw error;
        }

        // Step 2: Get account information
        console.log('\n2. Getting account information...');
        let accountInfoResponse;
        try {
            accountInfoResponse = await callMcpTool('get_account_info');
            console.log('Response:', JSON.stringify(accountInfoResponse, null, 2));

            // Parse the response content
            let accountInfo;
            if (typeof accountInfoResponse === 'string') {
                try {
                    accountInfo = JSON.parse(accountInfoResponse);
                } catch (e) {
                    accountInfo = { content: accountInfoResponse };
                }
            } else {
                accountInfo = accountInfoResponse;
            }

            console.log('✅ Account information retrieved:');
            console.log(`   - Account ID: ${accountInfo.account_id || 'N/A'}`);
            console.log(`   - Name: ${accountInfo.name ? accountInfo.name.display_name : 'N/A'}`);
            console.log(`   - Email: ${accountInfo.email || 'N/A'}`);
            console.log(`   - Account Type: ${accountInfo.account_type || 'N/A'}`);
            recordStepResult('Get Account Info', true);
        } catch (error) {
            console.error('❌ Step 2 failed:', error);
            recordStepResult('Get Account Info', false, error);
            throw error;
        }

        // Step 3: List files in root directory
        console.log('\n3. Listing files in root directory...');
        let rootFilesResponse;
        try {
            rootFilesResponse = await callMcpTool('list_files', { path: '' });
            console.log('Root files response:', JSON.stringify(rootFilesResponse, null, 2));
            // Parse the response if it's an array
            const rootFiles = Array.isArray(rootFilesResponse) ? rootFilesResponse : [];
            console.log(`✅ Found ${rootFiles.length} items in root directory`);
            recordStepResult('List Root Directory', true);
        } catch (error) {
            console.error('❌ Step 3 failed:', error);
            recordStepResult('List Root Directory', false, error);
            throw error;
        }

        // Step 4: Create a test folder
        console.log(`\n4. Creating test folder "${TEST_FOLDER_NAME}"...`);
        try {
            await callMcpTool('create_folder', { path: `/${TEST_FOLDER_NAME}` });
            console.log(`✅ Folder "${TEST_FOLDER_NAME}" created successfully`);
            recordStepResult('Create Test Folder', true);
        } catch (error) {
            if (error.message.includes('path/conflict')) {
                console.log(`ℹ️ Folder "${TEST_FOLDER_NAME}" may already exist, continuing...`);
                recordStepResult('Create Test Folder', true);
            } else {
                console.error('❌ Failed to create folder:', error);
                recordStepResult('Create Test Folder', false, error);
                throw error;
            }
        }

        // Run the tests
        runTests().catch(error => {
            console.error('Failed to run tests:', error);
            process.exit(1);
        });
        // Step 5: Upload a test file
        console.log(`\n5. Uploading test file "${TEST_FILE_NAME}"...`);
        try {
            const encodedContent = encodeBase64(TEST_FILE_CONTENT);
            await callMcpTool('upload_file', {
                path: `/${TEST_FOLDER_NAME}/${TEST_FILE_NAME}`,
                content: encodedContent
            });
            console.log(`✅ File "${TEST_FILE_NAME}" uploaded successfully`);
            recordStepResult('Upload Test File', true);
        } catch (error) {
            console.error('❌ Step 5 failed:', error);
            recordStepResult('Upload Test File', false, error);
            throw error;
        }

        // Step 6: Get file metadata
        console.log('\n6. Getting file metadata...');
        let fileMetadataResponse;
        try {
            fileMetadataResponse = await callMcpTool('get_file_metadata', {
                path: `/${TEST_FOLDER_NAME}/${TEST_FILE_NAME}`
            });
            console.log('File metadata response:', JSON.stringify(fileMetadataResponse, null, 2));

            // Parse the response
            let fileMetadata;
            if (typeof fileMetadataResponse === 'string') {
                try {
                    fileMetadata = JSON.parse(fileMetadataResponse);
                } catch (e) {
                    fileMetadata = {};
                }
            } else {
                fileMetadata = fileMetadataResponse || {};
            }

            console.log('✅ File metadata retrieved:');
            console.log(`   - Name: ${fileMetadata.name || 'N/A'}`);
            console.log(`   - Path: ${fileMetadata.path_display || 'N/A'}`);
            console.log(`   - Size: ${fileMetadata.size || 'N/A'} bytes`);
            console.log(`   - Modified: ${fileMetadata.server_modified || 'N/A'}`);
            recordStepResult('Get File Metadata', true);
        } catch (error) {
            console.error('❌ Step 6 failed:', error);
            recordStepResult('Get File Metadata', false, error);
            throw error;
        }

        // Step 7: Download the file
        console.log('\n7. Downloading the file...');
        let downloadedFileResponse;
        try {
            downloadedFileResponse = await callMcpTool('download_file', {
                path: `/${TEST_FOLDER_NAME}/${TEST_FILE_NAME}`
            });
            console.log('Download response:', JSON.stringify(downloadedFileResponse, null, 2));

            // Handle the downloaded file content
            let decodedContent = 'N/A';
            if (typeof downloadedFileResponse === 'string') {
                try {
                    decodedContent = decodeBase64(downloadedFileResponse);
                } catch (e) {
                    console.log('Error decoding content:', e.message);
                    decodedContent = 'Error: Could not decode content';
                    throw e;
                }
            } else {
                decodedContent = 'Response was not a string';
                throw new Error('Invalid response format');
            }

            console.log('✅ File downloaded successfully');
            console.log(`   - Content: "${decodedContent}"`);
            recordStepResult('Download File', true);
        } catch (error) {
            console.error('❌ Step 7 failed:', error);
            recordStepResult('Download File', false, error);
            throw error;
        }

        // Step 8: Try to create a sharing link
        console.log('\n8. Attempting to create a sharing link...');
        try {
            const sharingLinkResponse = await callMcpTool('get_sharing_link', {
                path: `/${TEST_FOLDER_NAME}/${TEST_FILE_NAME}`
            });
            console.log('Sharing link response:', JSON.stringify(sharingLinkResponse, null, 2));

            // Check if the response contains an error message
            if (typeof sharingLinkResponse === 'string' && sharingLinkResponse.includes('missing_scope')) {
                console.log('❌ Failed to create sharing link due to missing permissions');
                console.log('   - Make sure your token has the sharing.write permission scope enabled');
                recordStepResult('Create Sharing Link', false, new Error('Missing sharing.write permission scope'));
            } else {
                // Try to extract the URL from the response
                let url = 'N/A';
                if (typeof sharingLinkResponse === 'object' && sharingLinkResponse.url) {
                    url = sharingLinkResponse.url;
                } else if (typeof sharingLinkResponse === 'string') {
                    try {
                        const parsed = JSON.parse(sharingLinkResponse);
                        url = parsed.url || 'N/A';
                    } catch (e) {
                        // Not JSON, use as is
                    }
                }

                if (url !== 'N/A') {
                    console.log('✅ Sharing link created successfully');
                    console.log(`   - Link: ${url}`);
                    recordStepResult('Create Sharing Link', true);
                } else {
                    throw new Error('Failed to extract sharing link URL from response');
                }
            }
        } catch (error) {
            console.log('❌ Failed to create sharing link');
            console.log(`   - Error: ${error.message}`);
            recordStepResult('Create Sharing Link', false, error);
        }

        // Step 9: List the test folder
        console.log(`\n9. Listing contents of "${TEST_FOLDER_NAME}"...`);
        let folderContentsResponse;
        try {
            folderContentsResponse = await callMcpTool('list_files', {
                path: `/${TEST_FOLDER_NAME}`
            });
            console.log('Folder contents response:', JSON.stringify(folderContentsResponse, null, 2));
            // Parse the response if it's an array
            const folderContents = Array.isArray(folderContentsResponse) ? folderContentsResponse : [];
            console.log(`✅ Found ${folderContents.length} items in the test folder`);
            recordStepResult('List Test Folder', true);
        } catch (error) {
            console.error('❌ Step 9 failed:', error);
            recordStepResult('List Test Folder', false, error);
            throw error;
        }

        // Step 10: Search for files
        console.log('\n10. Searching for files with "test" in the name...');
        let searchResultsResponse;
        try {
            searchResultsResponse = await callMcpTool('search_files', {
                query: 'test',
                path: '',
                max_results: 10
            });
            console.log('Search results response:', JSON.stringify(searchResultsResponse, null, 2));
            // Parse the response if it's an array
            const searchResults = Array.isArray(searchResultsResponse) ? searchResultsResponse : [];
            console.log(`✅ Found ${searchResults.length} items matching the search query`);
            recordStepResult('Search Files', true);
        } catch (error) {
            console.error('❌ Step 10 failed:', error);
            recordStepResult('Search Files', false, error);
            throw error;
        }

        // Step 11: Copy the file
        console.log(`\n11. Copying the file to "${TEST_FILE_COPY_NAME}"...`);
        try {
            await callMcpTool('copy_item', {
                from_path: `/${TEST_FOLDER_NAME}/${TEST_FILE_NAME}`,
                to_path: `/${TEST_FOLDER_NAME}/${TEST_FILE_COPY_NAME}`
            });
            console.log('✅ File copied successfully');
            recordStepResult('Copy File', true);
        } catch (error) {
            console.error('❌ Step 11 failed:', error);
            recordStepResult('Copy File', false, error);
            throw error;
        }

        // Step 12: Move/rename the file
        console.log(`\n12. Renaming the copied file to "${TEST_FILE_RENAMED_NAME}"...`);
        try {
            await callMcpTool('move_item', {
                from_path: `/${TEST_FOLDER_NAME}/${TEST_FILE_COPY_NAME}`,
                to_path: `/${TEST_FOLDER_NAME}/${TEST_FILE_RENAMED_NAME}`
            });
            console.log('✅ File renamed successfully');
            recordStepResult('Rename File', true);
        } catch (error) {
            console.error('❌ Step 12 failed:', error);
            recordStepResult('Rename File', false, error);
            throw error;
        }

        // Step 13: List the test folder again
        console.log(`\n13. Listing contents of "${TEST_FOLDER_NAME}" again...`);
        let updatedFolderContentsResponse;
        try {
            updatedFolderContentsResponse = await callMcpTool('list_files', {
                path: `/${TEST_FOLDER_NAME}`
            });
            console.log('Updated folder contents response:', JSON.stringify(updatedFolderContentsResponse, null, 2));

            // Parse the response if it's an array
            const updatedFolderContents = Array.isArray(updatedFolderContentsResponse) ? updatedFolderContentsResponse : [];
            console.log(`✅ Found ${updatedFolderContents.length} items in the test folder`);
            console.log('   Files:');
            if (updatedFolderContents.length > 0) {
                updatedFolderContents.forEach((item) => {
                    console.log(`   - ${item.name || 'Unknown'}`);
                });
            } else {
                console.log('   No files found');
            }
            recordStepResult('List Updated Folder', true);
        } catch (error) {
            console.error('❌ Step 13 failed:', error);
            recordStepResult('List Updated Folder', false, error);
            throw error;
        }

        // Step 14: Delete the renamed file
        console.log(`\n14. Deleting the renamed file "${TEST_FILE_RENAMED_NAME}"...`);
        try {
            await callMcpTool('delete_item', {
                path: `/${TEST_FOLDER_NAME}/${TEST_FILE_RENAMED_NAME}`
            });
            console.log('✅ File deleted successfully');
            recordStepResult('Delete File', true);
        } catch (error) {
            console.error('❌ Step 14 failed:', error);
            recordStepResult('Delete File', false, error);
            throw error;
        }

        // Step 15: Verify deletion
        console.log('\n15. Verifying deletion...');
        let finalFolderContentsResponse;
        try {
            finalFolderContentsResponse = await callMcpTool('list_files', {
                path: `/${TEST_FOLDER_NAME}`
            });
            console.log('Final folder contents response:', JSON.stringify(finalFolderContentsResponse, null, 2));

            // Parse the response if it's an array
            const finalFolderContents = Array.isArray(finalFolderContentsResponse) ? finalFolderContentsResponse : [];
            console.log(`✅ Found ${finalFolderContents.length} items in the test folder after deletion`);
            console.log('   Files:');
            if (finalFolderContents.length > 0) {
                finalFolderContents.forEach((item) => {
                    console.log(`   - ${item.name || 'Unknown'}`);
                });
            } else {
                console.log('   No files found');
            }
            recordStepResult('Verify Deletion', true);
        } catch (error) {
            console.error('❌ Step 15 failed:', error);
            recordStepResult('Verify Deletion', false, error);
            throw error;
        }
    } catch (error) {
        console.error('❌ Error running tests:', error);
    } finally {
        // Print test summary
        console.log('\n-----------------------------------');
        console.log('Test Summary');
        console.log('-----------------------------------');
        console.log(`Total Steps: ${results.total}`);
        console.log(`Passed: ${results.passed}`);
        console.log(`Failed: ${results.failed}`);
        console.log(`Success Rate: ${((results.passed / results.total) * 100).toFixed(1)}%`);

        if (results.failed > 0) {
            console.log('\nFailed Steps:');
            Object.entries(results.steps)
                .filter(([_, result]) => !result.success)
                .forEach(([step, result]) => {
                    console.log(`- ${step}: ${result.error}`);
                });
        }
    }
}
